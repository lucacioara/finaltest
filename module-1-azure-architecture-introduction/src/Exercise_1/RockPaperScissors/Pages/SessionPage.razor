@page "/gamepage"
@inject NavigationManager Navigation
@inject ISessionService _sessionService
@inject Session GameSession
@using System.Web
@using RockPaperScissors.Models
@using RockPaperScissors.Services

<PageTitle>Game Page</PageTitle>

<div class="full-page-container d-flex flex-column justify-content-center align-items-center" style="background-color: #f0e68c; position: relative; min-height: 100vh;">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-center w-100 p-4 text-center" style="position: absolute; top: 0; left: 0; right: 0;">
        @if (status?.State != SessionState.Finished)
        {
            <h1 class="w-100 text-center" style="color: navy; font-family: 'Arial Black', sans-serif; font-size: 2.5rem;">
                Round @(status?.CurrentRound)/@(status?.MaxRounds)
            </h1>
        }
    </div>

    <div class="game-section text-center w-50" style="padding-top: 20px;">
        <div class="row justify-content-center align-items-center">
            <div class="col-4 text-center">
                <h2 class="text-center mb-3" style="color: #ff9900; font-family: 'Arial Black', sans-serif; font-size: 2.5rem;">
                    @(status?.Player1.Name)
                </h2>
                <h3 class="display-3" style="color: #2e8b57; font-family: 'Arial Black', sans-serif;">
                    @(status?.Player1.Points)
                </h3>
            </div>

            <div class="col-4 text-center">
                <h1 class="text-center" style="color: #ff9900; font-family: 'Arial Black', sans-serif; font-size: 2.5rem;">
                    @(status?.Player1.Points) - @(status?.Player2.Points)
                </h1>
            </div>

            <div class="col-4 text-center">
                <h2 class="text-center mb-3" style="color: #ff9900; font-family: 'Arial Black', sans-serif; font-size: 2.5rem;">
                    @(status?.Player2.Name)
                </h2>
                <h3 class="display-3" style="color: #2e8b57; font-family: 'Arial Black', sans-serif;">
                    @(status?.Player2.Points)
                </h3>
            </div>
        </div>

        @if (status?.State == SessionState.NextRound)
        {
            <div class="my-4">
                <button class="btn btn-lg px-5" @onclick="ReadyForNextRound"
                        style="background-color: #ff9900; color: white; font-weight: bold; border-radius: 25px; font-size: 1.5rem;">
                    Next Round!
                </button>
            </div>
        }

        @if (status?.State == SessionState.Finished)
        {
            switch (status.Result)
            {
                case SessionResult.Player1:
                    if (GameSession.IsInvited)
                    {
                        <h3>You lost the game!</h3>
                    }
                    else
                    {
                        <h3>You won the game!🎉</h3>
                    }
                    break;
                case SessionResult.Player2:
                    if (GameSession.IsInvited)
                    {
                        <h3>You won the game!🎉</h3>
                    }
                    else
                    {
                        <h3>You lost the game!</h3>
                    }
                    break;
            }

            <button class="btn btn-lg align-items-center justify-content-center"
                    @onclick="StartNewGame"
                    style="background-color: #32cd32; color: white; font-family: 'Arial Black', sans-serif; font-size: 1.5rem; font-weight: bold; border: none; border-radius: 25px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); padding: 10px 20px;">
                Start New Game ➡️
            </button>
        }
        else
        {
            <div class="mx-auto border border-success w-25 rounded bg-white shadow-lg"
                 style="z-index: 1; margin-top: 20px;">
                @if (Result != null && status?.State != SessionState.Finished)
                {
                    switch (Result)
                    {
                        case SessionResult.Player1:
                            if (GameSession.IsInvited)
                            {
                                <h3>You lost!</h3>
                            }
                            else
                            {
                                <h3>You won!🎉</h3>
                            }
                            break;
                        case SessionResult.Player2:
                            if (GameSession.IsInvited)
                            {
                                <h3>You won!🎉</h3>
                            }
                            else
                            {
                                <h3>You lost!</h3>
                            }
                            break;
                        case SessionResult.Tie:
                            <h3>It's a tie!</h3>
                            break;
                    }
                }
                else
                {
                    @if (Player1.Choice != null)
                    {
                        <h4 style="color: #2e8b57;">Your Selection: @Player1.Choice</h4>
                    }
                    else
                    {
                        <h4 style="color: #2e8b57;">Make Your Move!</h4>
                    }
                }
            </div>
        }
    </div>

    <div class="row justify-content-center align-items-center mt-5" style="max-width: 800px; margin: 0 auto; margin-bottom: 80px;">
        <button class="col-3 btn btn-outline-dark btn-lg mx-4" @onclick='() => SelectMove(Choice.Rock)'
                style="border-radius: 15px; background-color: #ff7f50; font-size: 2.5rem; padding: 50px;">
            <p class="display-3" style="margin-bottom: 10px;">🗿</p>
            <h3 style="font-size: 2.5rem; white-space: normal; overflow: visible; text-overflow: unset;">Rock</h3>
        </button>

        <button class="col-3 btn btn-outline-dark btn-lg mx-4" @onclick='() => SelectMove(Choice.Paper)'
                style="border-radius: 15px; background-color: #32cd32; font-size: 2.5rem; padding: 50px;">
            <p class="display-3" style="margin-bottom: 10px;">📄</p>
            <h3 style="font-size: 2.5rem; white-space: normal; overflow: visible; text-overflow: unset;">Paper</h3>
        </button>

        <button class="col-3 btn btn-outline-dark btn-lg mx-4" @onclick='() => SelectMove(Choice.Scissors)'
                style="border-radius: 15px; background-color: #1e90ff; font-size: 2.5rem; padding: 50px;">
            <p class="display-3" style="margin-bottom: 10px;">✂</p>
            <h3 style="font-size: 2.5rem; white-space: normal; overflow: visible; text-overflow: unset;">Scissors</h3>
        </button>
    </div>

    <div class="row justify-content-center align-items-center mb-4" style="max-width: 800px; margin: 0 auto;">
        <button class="btn btn-danger btn-lg mb-4" @onclick="ForfeitGame"
                style="border-radius: 25px; font-size: 1.5rem; padding: 15px 30px; font-weight: bold;">
            Forfeit Game
        </button>
    </div>

    <div class="d-flex justify-content-center mt-4" style="position: absolute; bottom: 40px; left: 50%; transform: translateX(-50%);">
        <div class="card text-center" style="background-color: antiquewhite;">
            <div class="card-body">
                <h4 style="color: gray; font-family: 'Arial Black', sans-serif; font-size: 1.5rem;">
                    @statusText
                </h4>

                <button class="btn btn-lg d-flex align-items-center justify-content-center mx-auto"
                        @onclick='() => RefreshStatus()'
                        style="background-color: #ff9900; color: white; font-family: 'Arial Black', sans-serif; font-weight: bold; border: none; border-radius: 25px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                    <span>&#x21bb;</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private Player Player1;
    private string playerName = string.Empty;
    private SessionResult? Result;
    private bool disabled = false;
    string sessionId;
    private SessionStatus status;
    private string statusText = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        Player1 = GameSession.Player;
        sessionId = GameSession.SessionId;
        await RefreshStatus();
    }



    private async Task SelectMove(Choice choice)
    {
        disabled = true;
        Player1.Choice = choice;
        await _sessionService.CastInVote(sessionId, Player1);
        StateHasChanged();
    }



    private async Task ClearMove()
    {
        Player1.Choice = null;
    }



    private async Task ReadyForNextRound()
    {
        await _sessionService.ReadyForNextRound(sessionId, Player1.Id);
        ClearMove();
    }



    private async Task RefreshStatus()
    {
        status = await _sessionService.GetStatus(sessionId);
        switch (status.State)
        {
            case SessionState.Created:
                statusText = "Session Created";
                break;
            case SessionState.WaitingForPlayer:
                statusText = "Waiting for player to join";
                break;
            case SessionState.WaitingForMoves:
                statusText = "Waiting for both players to make a move";
                Result = null;
                disabled = false;
                break;
            case SessionState.WaitingForMove:
                if (Player1.Choice != null)
                    disabled = true;
                else
                {
                    disabled = false;
                }
                var who = disabled ? "opponent" : "you";
                statusText = $"Waiting for {who} to make a move";
                Result = null;
                break;
            case SessionState.NextRound:
                statusText = $"Waiting for next round";
                Result = await _sessionService.GetSessionResult(sessionId);
                Player1.Choice = null;
                break;
            case SessionState.WaitingForResult:
                statusText = "Waiting for session result";
                Result = await _sessionService.GetSessionResult(sessionId);
                break;
            case SessionState.Finished:
                statusText = "Session Finished";
                if (Result is null)
                    Result = await _sessionService.GetSessionResult(sessionId);
                break;
            default:
                statusText = "Unknown";
                break;
        }
    }
    private async Task ForfeitGame()
    {
        await _sessionService.ForfeitGame(sessionId, Player1.Id);
    }


    private void StartNewGame()
    {
        Navigation.NavigateTo("/setround");
    }
}
